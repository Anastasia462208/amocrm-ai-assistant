#!/usr/bin/env python3
"""
AmoCRM Working Automation - –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ —Å –Ω–æ–≤—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —É—Å–ø–µ—à–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ amo_assistant_smart.py —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
"""

import json
import time
import sqlite3
import logging
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import TimeoutException, NoSuchElementException

class AmoCRMWorkingAutomation:
    def __init__(self):
        print("üöÄ AmoCRM Working Automation - –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –Ω–æ–≤—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏")
        print("="*70)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
        self.logger = logging.getLogger('AmoCRMWorking')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.init_database()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã
        self.driver = None
        self.wait = None
        self.current_client = None
        
        # –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è AmoCRM
        self.selectors = {
            'chat_input': {
                # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                'contenteditable': '.control-contenteditable__area.feed-compose__message[contenteditable="true"]',
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                'alternative_input': 'div[contenteditable="true"][data-hint*="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç"]',
                'any_contenteditable': 'div[contenteditable="true"]',
                # Fallback —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
                'textarea_message': "textarea[placeholder*='—Å–æ–æ–±—â–µ–Ω–∏–µ']",
                'textarea_general': "textarea",
            },
            'send_button': {
                # XPath —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
                'by_text_xpath': '//button[.//span[contains(@class, "button-input-inner__text") and contains(text(), "–û—Ç–ø—Ä–∞–≤–∏—Ç—å")]]',
                'by_span_xpath': '//span[@class="button-input-inner__text" and contains(text(), "–û—Ç–ø—Ä–∞–≤–∏—Ç—å")]/ancestor::button',
                # CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∫–∞–∫ fallback
                'submit_button': 'button[type="submit"]',
                'send_class': '.send-button, .btn-send'
            },
            'messages': {
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                'message_text': '.feed-note__message_paragraph',
                'message_container': '.feed-note',
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                'incoming_messages': "[class*='message']:not([class*='own'])",
                'any_messages': "[class*='message']"
            }
        }
        
        # –ì–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ç—É—Ä–∞—Ö –Ω–∞ 3 –¥–Ω—è
        self.tour_3_days_response = """üö£‚Äç‚ôÇÔ∏è –¢—É—Ä—ã –Ω–∞ 3 –¥–Ω—è –ø–æ —Ä–µ–∫–µ –ß—É—Å–æ–≤–∞—è:

üåü "–°–µ–º–µ–π–Ω—ã–π —Å–ø–ª–∞–≤" (3 –¥–Ω—è/2 –Ω–æ—á–∏)
üí∞ –¶–µ–Ω–∞: 18,000 —Ä—É–±/—á–µ–ª
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –î–ª—è —Å–µ–º–µ–π —Å –¥–µ—Ç—å–º–∏ –æ—Ç 8 –ª–µ—Ç
üìç –ú–∞—Ä—à—Ä—É—Ç: –ö–æ—É—Ä–æ–≤–∫–∞ - –ß—É—Å–æ–≤–∞—è

üåü "–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö" (3 –¥–Ω—è/2 –Ω–æ—á–∏)  
üí∞ –¶–µ–Ω–∞: 20,000 —Ä—É–±/—á–µ–ª
üèÉ‚Äç‚ôÇÔ∏è –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–∏—Å—Ç–æ–≤
üìç –ú–∞—Ä—à—Ä—É—Ç: –°—Ç–∞—Ä–æ—É—Ç–∫–∏–Ω—Å–∫ - –ß—É—Å–æ–≤–∞—è

–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–æ:
‚úÖ –†–∞—Ñ—Ç –∏ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
‚úÖ –¢—Ä–µ—Ö—Ä–∞–∑–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
‚úÖ –û–ø—ã—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
‚úÖ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä –æ—Ç/–¥–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞

üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã: 15-17 –∏—é–Ω—è, 22-24 –∏—é–Ω—è, 29 –∏—é–Ω—è-1 –∏—é–ª—è

–ö–∞–∫–æ–π —Ç—É—Ä –≤–∞—Å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üòä"""
        
        self.stats = {
            "messages_processed": 0,
            "responses_generated": 0,
            "start_time": datetime.now()
        }
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤"""
        try:
            self.db_conn = sqlite3.connect('conversations_working.db')
            self.db_cursor = self.db_conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            self.db_cursor.execute('''
                CREATE TABLE IF NOT EXISTS clients (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    first_contact DATETIME DEFAULT CURRENT_TIMESTAMP,
                    last_contact DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            self.db_cursor.execute('''
                CREATE TABLE IF NOT EXISTS conversations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    client_id INTEGER,
                    message_type TEXT NOT NULL,
                    message_text TEXT NOT NULL,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (client_id) REFERENCES clients (id)
                )
            ''')
            
            self.db_conn.commit()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    def setup_browser(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–∏–¥–∏–º—ã–π –±—Ä–∞—É–∑–µ—Ä (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥)"""
        try:
            print("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞...")
            
            chrome_options = Options()
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-blink-features=AutomationControlled")
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)
            chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
            
            self.driver = webdriver.Chrome(options=chrome_options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            self.wait = WebDriverWait(self.driver, 10)
            
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def manual_login_to_amocrm(self):
        """–†—É—á–Ω–æ–π –≤—Ö–æ–¥ –≤ amoCRM (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥)"""
        try:
            print("üîê –ü–µ—Ä–µ—Ö–æ–¥ –∫ amoCRM...")
            self.driver.get("https://amoshturm.amocrm.ru")
            
            print("\\n" + "="*70)
            print("üîê –ù–ê–°–¢–†–û–ô–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò AmoCRM")
            print("="*70)
            print("1. –í–æ–π–¥–∏—Ç–µ –≤ amoCRM (–ª–æ–≥–∏–Ω: amoshturm@gmail.com)")
            print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –¥–∏–∞–ª–æ–≥ —Å Anastasia")
            print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∏–¥–∏—Ç–µ:")
            print("   - –ò—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π")
            print("   - –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞")
            print("   - –ö–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'")
            print("4. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
            print("="*70)
            
            input("–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            self.identify_current_client()
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
            return False
    
    def identify_current_client(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (Anastasia)"""
        try:
            # –ò—â–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            name_selectors = [
                "h1", "h2", "h3",
                "[class*='client']", "[class*='contact']", "[class*='lead']",
                "[class*='name']", "[class*='title']"
            ]
            
            client_name = "Anastasia"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ç–∞–∫ –∫–∞–∫ –∑–Ω–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            
            for selector in name_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for element in elements:
                        text = element.text.strip()
                        if 'anastasia' in text.lower():
                            client_name = text
                            break
                    if client_name != "Anastasia":
                        break
                except:
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î
            self.current_client = self.get_or_create_client(client_name)
            print(f"üë§ –¢–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç: {client_name} (ID: {self.current_client})")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            self.current_client = self.get_or_create_client("Anastasia")
    
    def get_or_create_client(self, name):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î"""
        try:
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            self.db_cursor.execute("SELECT id FROM clients WHERE name = ?", (name,))
            result = self.db_cursor.fetchone()
            
            if result:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                self.db_cursor.execute(
                    "UPDATE clients SET last_contact = CURRENT_TIMESTAMP WHERE id = ?",
                    (result[0],)
                )
                self.db_conn.commit()
                return result[0]
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                self.db_cursor.execute(
                    "INSERT INTO clients (name) VALUES (?)",
                    (name,)
                )
                self.db_conn.commit()
                return self.db_cursor.lastrowid
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º: {e}")
            return 1
    
    def find_chat_input_field(self):
        """–ò—â–µ—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏"""
        try:
            print("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—è –≤–≤–æ–¥–∞...")
            
            # –ü—Ä–æ–±—É–µ–º –≤—Å–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            input_selectors = [
                # –ù–æ–≤—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                self.selectors['chat_input']['contenteditable'],
                self.selectors['chat_input']['alternative_input'],
                self.selectors['chat_input']['any_contenteditable'],
                # Fallback —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
                self.selectors['chat_input']['textarea_message'],
                "textarea[placeholder*='–°–æ–æ–±—â–µ–Ω–∏–µ']", 
                "textarea[placeholder*='–ù–∞–ø–∏—à–∏—Ç–µ']",
                "textarea[placeholder*='–û—Ç–≤–µ—Ç']",
                "input[placeholder*='—Å–æ–æ–±—â–µ–Ω–∏–µ']",
                "textarea[name*='message']",
                "textarea[class*='message']",
                "textarea[class*='input']",
                self.selectors['chat_input']['textarea_general']
            ]
            
            for selector in input_selectors:
                try:
                    element = WebDriverWait(self.driver, 2).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                    )
                    
                    if element.is_displayed() and element.is_enabled():
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞: {selector}")
                        return element
                        
                except Exception as e:
                    self.logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                    continue
            
            print("‚ùå –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞: {e}")
            return None
    
    def find_send_button(self):
        """–ò—â–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –Ω–æ–≤—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏"""
        try:
            print("üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏...")
            
            # XPath —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            xpath_selectors = [
                self.selectors['send_button']['by_text_xpath'],
                self.selectors['send_button']['by_span_xpath']
            ]
            
            for selector in xpath_selectors:
                try:
                    send_button = self.driver.find_element(By.XPATH, selector)
                    
                    if send_button.is_displayed() and send_button.is_enabled():
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (XPath): {selector}")
                        return send_button
                        
                except Exception as e:
                    self.logger.debug(f"XPath —Å–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                    continue
            
            # CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∫–∞–∫ fallback
            css_selectors = [
                self.selectors['send_button']['submit_button'],
                self.selectors['send_button']['send_class'],
                'button[title*="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"]',
                'button[aria-label*="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"]'
            ]
            
            for selector in css_selectors:
                try:
                    send_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                    
                    if send_button.is_displayed() and send_button.is_enabled():
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (CSS): {selector}")
                        return send_button
                        
                except Exception as e:
                    self.logger.debug(f"CSS —Å–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                    continue
            
            print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Enter")
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return None
    
    def send_message_to_chat(self, message_text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
        try:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text[:50]}...")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            input_field = self.find_chat_input_field()
            if not input_field:
                return self.show_message_for_copy(message_text)
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
            input_field.click()
            time.sleep(0.5)
            
            # –î–ª—è contenteditable –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            if input_field.get_attribute('contenteditable') == 'true':
                # –û—á–∏—â–∞–µ–º contenteditable
                ActionChains(self.driver).key_down(Keys.CONTROL).send_keys('a').key_up(Keys.CONTROL).perform()
                time.sleep(0.2)
                input_field.send_keys(Keys.DELETE)
                time.sleep(0.2)
                
                # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
                input_field.send_keys(message_text)
            else:
                # –û–±—ã—á–Ω–æ–µ –ø–æ–ª–µ
                input_field.clear()
                time.sleep(0.5)
                input_field.send_keys(message_text)
            
            time.sleep(1)
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            send_button = self.find_send_button()
            if send_button:
                send_button.click()
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É!")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Enter –∫–∞–∫ fallback
                input_field.send_keys(Keys.ENTER)
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Enter!")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            self.save_message(message_text, 'outgoing')
            self.stats['responses_generated'] += 1
            
            time.sleep(2)
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return self.show_message_for_copy(message_text)
    
    def show_message_for_copy(self, message_text):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\\n" + "="*70)
        print("üìã –°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –†–£–ß–ù–û–ô –û–¢–ü–†–ê–í–ö–ò:")
        print("="*70)
        print(message_text)
        print("="*70)
        input("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ Enter...")
        return True
    
    def save_message(self, message_text, message_type):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î"""
        try:
            self.db_cursor.execute('''
                INSERT INTO conversations (client_id, message_type, message_text)
                VALUES (?, ?, ?)
            ''', (self.current_client, message_type, message_text))
            
            self.db_conn.commit()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def find_new_messages(self):
        """–ò—â–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
            message_selectors = [
                self.selectors['messages']['message_text'],
                self.selectors['messages']['message_container'],
                self.selectors['messages']['incoming_messages'],
                "[class*='message']:not([class*='own'])",
                "[class*='incoming']",
                "[class*='received']",
                ".message:not(.outgoing)"
            ]
            
            messages = []
            for selector in message_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for element in elements:
                        text = element.text.strip()
                        if text and len(text) > 3:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            self.db_cursor.execute(
                                "SELECT id FROM conversations WHERE client_id = ? AND message_text = ? AND message_type = 'incoming'",
                                (self.current_client, text)
                            )
                            if not self.db_cursor.fetchone():
                                messages.append({
                                    'text': text,
                                    'element': element
                                })
                    
                    if messages:  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                        break
                        
                except Exception as e:
                    self.logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π {selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                    continue
            
            return messages
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    def analyze_message_and_respond(self, message_text):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç"""
        try:
            message_lower = message_text.lower()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.save_message(message_text, 'incoming')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            if any(word in message_lower for word in ['3 –¥–Ω—è', '—Ç—Ä–∏ –¥–Ω—è', '—Ç—Ä–µ—Ö–¥–Ω–µ–≤–Ω—ã–π']):
                return self.tour_3_days_response
            
            elif any(word in message_lower for word in ['—Ç—É—Ä', '—Å–ø–ª–∞–≤', '–ø–æ—Ö–æ–¥']):
                return """üö£‚Äç‚ôÇÔ∏è –£ –Ω–∞—Å –µ—Å—Ç—å —Ç—É—Ä—ã —Ä–∞–∑–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:

‚Ä¢ 2 –¥–Ω—è - –≤—ã—Ö–æ–¥–Ω—ã–µ —Ç—É—Ä—ã
‚Ä¢ 3 –¥–Ω—è - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã  
‚Ä¢ 4+ –¥–Ω–µ–π - —ç–∫—Å–ø–µ–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ç—É—Ä—ã

–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ç—É—Ä?"""
            
            elif any(word in message_lower for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ']):
                return """üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:

‚Ä¢ 2 –¥–Ω—è: –æ—Ç 8,000 —Ä—É–±/—á–µ–ª
‚Ä¢ 3 –¥–Ω—è: –æ—Ç 12,000 —Ä—É–±/—á–µ–ª  
‚Ä¢ 4+ –¥–Ω–µ–π: –æ—Ç 16,000 —Ä—É–±/—á–µ–ª

–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ, –ø–∏—Ç–∞–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
–ù–∞ –∫–∞–∫–æ–π —Ç—É—Ä –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å?"""
            
            elif any(word in message_lower for word in ['–∫–æ–≥–¥–∞', '–¥–∞—Ç–∞', '–≤—Ä–µ–º—è']):
                return """üìÖ –°–µ–∑–æ–Ω —Å–ø–ª–∞–≤–æ–≤: –º–∞–π - —Å–µ–Ω—Ç—è–±—Ä—å

–ë–ª–∏–∂–∞–π—à–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã:
‚Ä¢ –í—ã—Ö–æ–¥–Ω—ã–µ: –∫–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
‚Ä¢ –ë—É–¥–Ω–∏–µ –¥–Ω–∏: –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é

–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –ø–æ–µ–∑–¥–∫—É?"""
            
            else:
                return """–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! üòä

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
‚Ä¢ –ö–∞–∫–æ–π —Ç—É—Ä (–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)?
‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞—Ç—ã?
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?

–ü–æ–¥–±–µ—Ä—É –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!"""
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –°–µ–π—á–∞—Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
    
    def run_automation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ AmoCRM...")
        
        if not self.setup_browser():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
            return
        
        if not self.manual_login_to_amocrm():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ amoCRM")
            return
        
        print("\\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!")
        print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        try:
            while True:
                new_messages = self.find_new_messages()
                
                if new_messages:
                    print(f"\\nüì® –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(new_messages)}")
                    
                    for msg in new_messages:
                        print(f"\\nüì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {msg['text'][:50]}...")
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                        response = self.analyze_message_and_respond(msg['text'])
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                        success = self.send_message_to_chat(response)
                        
                        if success:
                            self.stats['messages_processed'] += 1
                            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. –í—Å–µ–≥–æ: {self.stats['messages_processed']}")
                        
                        time.sleep(3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                else:
                    print(".", end="", flush=True)
                
                time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                
        except KeyboardInterrupt:
            print("\\nüõë –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"\\n‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
        finally:
            if self.driver:
                print("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...")
                self.driver.quit()
            
            if hasattr(self, 'db_conn'):
                self.db_conn.close()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            uptime = datetime.now() - self.stats['start_time']
            print(f"\\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ë–û–¢–´:")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}")
            print(f"üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats['messages_processed']}")
            print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {self.stats['responses_generated']}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ AmoCRM Working Automation")
    print("–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ —Å –Ω–æ–≤—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏")
    print()
    
    automation = AmoCRMWorkingAutomation()
    automation.run_automation()

if __name__ == "__main__":
    main()
