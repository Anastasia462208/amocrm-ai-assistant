#!/usr/bin/env python3
"""
AmoCRM Automation with Real Selectors
Based on actual AmoCRM HTML structure
"""

import time
import logging
import json
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from database_manager import DatabaseManager
from context_manager import ConversationContextManager

class AmoCRMRealAutomation:
    def __init__(self, login: str, password: str):
        self.login = login
        self.password = password
        
        # Initialize components
        self.db = DatabaseManager("amocrm_real_conversations.db")
        self.context_manager = ConversationContextManager(self.db)
        
        # Real AmoCRM selectors based on provided HTML
        self.selectors = {
            'messages': {
                'container': '.feed-note__message_paragraph',
                'text': '.feed-note__message_paragraph',
                'author': '.feed-note__author',
                'timestamp': '.feed-note__time'
            },
            'input': {
                'textarea': 'textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], textarea[placeholder*="–°–æ–æ–±—â–µ–Ω–∏–µ"], .feed-compose__textarea',
                'send_button': '.feed-compose__send, button[type="submit"], .send-button'
            },
            'navigation': {
                'leads': 'a[href*="leads"], .nav-leads',
                'contacts': 'a[href*="contacts"], .nav-contacts',
                'chat': '.feed, .chat, .messages'
            }
        }
        
        # Response templates for tours
        self.tour_responses = {
            'tours_3_days': """üö£‚Äç‚ôÇÔ∏è **–¢—É—Ä—ã –Ω–∞ 3 –¥–Ω—è –ø–æ —Ä–µ–∫–µ –ß—É—Å–æ–≤–∞—è:**

üåü **"–°–µ–º–µ–π–Ω—ã–π —Å–ø–ª–∞–≤"** (3 –¥–Ω—è/2 –Ω–æ—á–∏)
üí∞ –¶–µ–Ω–∞: 18,000 —Ä—É–±/—á–µ–ª
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –î–ª—è —Å–µ–º–µ–π —Å –¥–µ—Ç—å–º–∏ –æ—Ç 8 –ª–µ—Ç
üìç –ú–∞—Ä—à—Ä—É—Ç: –ö–æ—É—Ä–æ–≤–∫–∞ - –ß—É—Å–æ–≤–∞—è
üèïÔ∏è –ù–æ—á–µ–≤–∫–∏ –≤ –ø–∞–ª–∞—Ç–∫–∞—Ö –Ω–∞ –±–µ—Ä–µ–≥—É

üåü **"–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö"** (3 –¥–Ω—è/2 –Ω–æ—á–∏)  
üí∞ –¶–µ–Ω–∞: 20,000 —Ä—É–±/—á–µ–ª
üèÉ‚Äç‚ôÇÔ∏è –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–∏—Å—Ç–æ–≤
üìç –ú–∞—Ä—à—Ä—É—Ç: –°—Ç–∞—Ä–æ—É—Ç–∫–∏–Ω—Å–∫ - –ß—É—Å–æ–≤–∞—è
üéØ –ë–æ–ª—å—à–µ –ø–æ—Ä–æ–≥–æ–≤ –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π

**–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–æ:**
‚úÖ –†–∞—Ñ—Ç –∏ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
‚úÖ –¢—Ä–µ—Ö—Ä–∞–∑–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
‚úÖ –û–ø—ã—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
‚úÖ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä –æ—Ç/–¥–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞
‚úÖ –°—Ç—Ä–∞—Ö–æ–≤–∫–∞

üìÖ **–ë–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã:** 15-17 –∏—é–Ω—è, 22-24 –∏—é–Ω—è, 29 –∏—é–Ω—è-1 –∏—é–ª—è

–ö–∞–∫–æ–π —Ç—É—Ä –≤–∞—Å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üòä""",
            
            'booking_info': """üìù **–ö–∞–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä:**

1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –∏ —Ç—É—Ä
2Ô∏è‚É£ –í–Ω–µ—Å–∏—Ç–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É 30% (5,400-6,000 —Ä—É–±)
3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
4Ô∏è‚É£ –î–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤ –¥–µ–Ω—å —Ç—É—Ä–∞

üí≥ **–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –°–±–µ—Ä–±–∞–Ω–∫–∞
‚Ä¢ –ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ

üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7-XXX-XXX-XX-XX
‚Ä¢ WhatsApp: +7-XXX-XXX-XX-XX
‚Ä¢ Email: info@vsenasplav.ru

–ì–æ—Ç–æ–≤—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å? –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–µ –¥–∞—Ç—ã! üéØ"""
        }
        
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
    
    def analyze_message(self, message_text: str) -> dict:
        """Analyze incoming message and determine response"""
        
        # Use context manager for analysis
        intents = self.context_manager.analyze_message_intent(message_text)
        entities = self.context_manager.extract_entities(message_text)
        
        # Determine response type
        response_type = self._determine_response_type(message_text, intents, entities)
        
        return {
            'message': message_text,
            'intents': intents,
            'entities': entities,
            'response_type': response_type,
            'suggested_response': self._get_response_template(response_type, entities)
        }
    
    def _determine_response_type(self, message: str, intents: list, entities: dict) -> str:
        """Determine what type of response to give"""
        
        message_lower = message.lower()
        
        # Check for 3-day tour inquiry
        if '3 –¥–Ω—è' in message_lower or '—Ç—Ä–∏ –¥–Ω—è' in message_lower:
            if any(word in message_lower for word in ['—Ç—É—Ä', '—Å–ø–ª–∞–≤', '–ø–æ–µ–∑–¥–∫–∞']):
                return 'tours_3_days'
        
        # Check for general tour inquiry
        if any(word in message_lower for word in ['—Ç—É—Ä', '—Å–ø–ª–∞–≤', '–ø–æ–µ–∑–¥–∫–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∞']):
            return 'tours_3_days'  # Default to 3-day tours since that was asked
        
        # Check for booking inquiry
        if 'booking_inquiry' in intents or any(word in message_lower for word in ['–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ']):
            return 'booking_info'
        
        # Check for price inquiry
        if 'price_inquiry' in intents:
            return 'tours_3_days'  # Include prices in tour info
        
        return 'tours_3_days'  # Default response
    
    def _get_response_template(self, response_type: str, entities: dict) -> str:
        """Get response template based on type"""
        
        if response_type in self.tour_responses:
            response = self.tour_responses[response_type]
            
            # Personalize based on entities
            if entities.get('numbers'):
                # If specific number of people mentioned
                people_count = entities['numbers'][0] if entities['numbers'] else None
                if people_count and people_count > 1:
                    response += f"\n\nüë• –î–ª—è –≥—Ä—É–ø–ø—ã {people_count} —á–µ–ª–æ–≤–µ–∫ –≤–æ–∑–º–æ–∂–Ω–∞ —Å–∫–∏–¥–∫–∞!"
            
            return response
        
        return "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –°–µ–π—á–∞—Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
    
    def process_test_message(self, message_html: str) -> dict:
        """Process the test message from AmoCRM"""
        
        # Extract text from HTML
        import re
        text_match = re.search(r'<div class="feed-note__message_paragraph[^"]*"[^>]*>([^<]+)</div>', message_html)
        
        if text_match:
            message_text = text_match.group(1).strip()
        else:
            message_text = "—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å —Ç—É—Ä—ã –Ω–∞ 3 –¥–Ω—è"  # Fallback
        
        self.logger.info(f"Processing message: {message_text}")
        
        # Analyze message
        analysis = self.analyze_message(message_text)
        
        # Store in database
        client_id = self.db.get_or_create_client(12345, "Anastasia", "test@example.com")
        conversation_id = self.db.get_or_create_conversation(client_id)
        
        # Add client message
        self.db.add_message(conversation_id, "client", message_text)
        
        # Update context
        self.context_manager.update_conversation_context(
            conversation_id, message_text, 'client'
        )
        
        # Add assistant response
        response = analysis['suggested_response']
        self.db.add_message(conversation_id, "assistant", response)
        
        # Get conversation metrics
        metrics = self.context_manager.get_conversation_metrics(conversation_id)
        
        return {
            'analysis': analysis,
            'response': response,
            'conversation_id': conversation_id,
            'metrics': metrics
        }
    
    def format_response_for_amocrm(self, response: str) -> str:
        """Format response for AmoCRM (remove markdown, adjust formatting)"""
        
        # Remove markdown formatting for AmoCRM
        formatted = response
        
        # Replace markdown bold with simple text
        formatted = re.sub(r'\*\*(.*?)\*\*', r'\1', formatted)
        
        # Replace markdown lists with simple text
        formatted = re.sub(r'^\s*[‚Ä¢‚úÖ‚ùåüéØüìçüèïÔ∏èüèÉ‚Äç‚ôÇÔ∏èüë®‚Äçüë©‚Äçüëß‚Äçüë¶üí∞üìÖüìùüí≥üìû]\s*', '‚Ä¢ ', formatted, flags=re.MULTILINE)
        
        # Replace emojis with text equivalents if needed
        emoji_replacements = {
            'üö£‚Äç‚ôÇÔ∏è': '[–°–ø–ª–∞–≤]',
            'üåü': '*',
            'üí∞': '–¶–µ–Ω–∞:',
            'üìç': '–ú–∞—Ä—à—Ä—É—Ç:',
            '‚úÖ': '‚úì',
            'üìÖ': '–î–∞—Ç—ã:',
            'üòä': ':)',
            'üéØ': '>>>'
        }
        
        for emoji, replacement in emoji_replacements.items():
            formatted = formatted.replace(emoji, replacement)
        
        return formatted
    
    def get_selectors_info(self) -> dict:
        """Get information about selectors for manual testing"""
        return {
            'message_selectors': [
                '.feed-note__message_paragraph',
                '.feed-note__message_paragraph ',  # With space
                'div[class*="feed-note__message_paragraph"]'
            ],
            'input_selectors': [
                'textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"]',
                'textarea[placeholder*="–°–æ–æ–±—â–µ–Ω–∏–µ"]', 
                '.feed-compose__textarea',
                'textarea.feed-compose__textarea'
            ],
            'send_button_selectors': [
                '.feed-compose__send',
                'button[type="submit"]',
                '.send-button',
                'button.feed-compose__send'
            ]
        }

def test_message_analysis():
    """Test the message analysis with the real AmoCRM message"""
    
    print("üß™ Testing AmoCRM Message Analysis")
    print("=" * 50)
    
    # Initialize automation
    automation = AmoCRMRealAutomation("amoshturm@gmail.com", "GbbT4Z5L")
    
    # Test message HTML from AmoCRM
    test_message_html = '<div class="feed-note__message_paragraph ">—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å —Ç—É—Ä—ã –Ω–∞ 3 –¥–Ω—è</div>'
    
    # Process message
    result = automation.process_test_message(test_message_html)
    
    print(f"üì® –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {result['analysis']['message']}")
    print(f"üß† –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è: {result['analysis']['intents']}")
    print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏: {result['analysis']['entities']}")
    print(f"üéØ –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {result['analysis']['response_type']}")
    print(f"üí¨ ID –¥–∏–∞–ª–æ–≥–∞: {result['conversation_id']}")
    
    print(f"\nüìã –ú–µ—Ç—Ä–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞:")
    for key, value in result['metrics'].items():
        if key != 'next_actions':
            if isinstance(value, float):
                print(f"   {key}: {value:.2f}")
            else:
                print(f"   {key}: {value}")
    
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
    for action in result['metrics']['next_actions']:
        print(f"   ‚Ä¢ {action}")
    
    print(f"\nü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:")
    print("-" * 30)
    print(result['response'])
    
    print(f"\nüìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è AmoCRM:")
    print("-" * 30)
    formatted_response = automation.format_response_for_amocrm(result['response'])
    print(formatted_response)
    
    print(f"\nüîß –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    selectors = automation.get_selectors_info()
    for category, selector_list in selectors.items():
        print(f"   {category}:")
        for selector in selector_list:
            print(f"     ‚Ä¢ {selector}")
    
    return result

if __name__ == "__main__":
    test_message_analysis()
