#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AmoCRM + Manus API —á–µ—Ä–µ–∑ Webhooks
–î–≤–æ–π–Ω–æ–π webhook handler –¥–ª—è –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
"""

import json
import time
import logging
import requests
from datetime import datetime
from flask import Flask, request, jsonify
from urllib.parse import parse_qs
import sqlite3
import threading
from typing import Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('webhook_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    # Manus API
    MANUS_API_URL = "https://api.manus.im/v1/tasks"
    MANUS_API_KEY = "sk-fNQLWaD5AHLplRB2fVDZ8lfKxVbbEEHWCzl_z016aM4_2EMtOSPtEfCUzhUOZq1DCufwtAAmfIeCn0QFZaS9DkBp2QS3"
    
    # AmoCRM API
    AMOCRM_DOMAIN = "amoshturm.amocrm.ru"
    AMOCRM_ACCESS_TOKEN = "YOUR_AMOCRM_TOKEN"  # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    DB_PATH = "webhook_system.db"

app = Flask(__name__)

class DatabaseManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS tasks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                task_id TEXT UNIQUE NOT NULL,
                lead_id TEXT NOT NULL,
                original_message TEXT NOT NULL,
                manus_response TEXT,
                status TEXT DEFAULT 'created',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                completed_at TIMESTAMP,
                error_message TEXT
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS statistics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                event_type TEXT NOT NULL,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                details TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def save_task(self, task_id: str, lead_id: str, message: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR REPLACE INTO tasks 
                (task_id, lead_id, original_message, status) 
                VALUES (?, ?, ?, 'created')
            ''', (task_id, lead_id, message))
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return False
    
    def update_task_response(self, task_id: str, response: str, status: str = 'completed') -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∑–∞–¥–∞—á–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE tasks 
                SET manus_response = ?, status = ?, completed_at = CURRENT_TIMESTAMP
                WHERE task_id = ?
            ''', (response, status, task_id))
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return False
    
    def get_task_by_id(self, task_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT task_id, lead_id, original_message, manus_response, status, created_at
                FROM tasks WHERE task_id = ?
            ''', (task_id,))
            
            result = cursor.fetchone()
            conn.close()
            
            if result:
                return {
                    'task_id': result[0],
                    'lead_id': result[1],
                    'original_message': result[2],
                    'manus_response': result[3],
                    'status': result[4],
                    'created_at': result[5]
                }
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return None
    
    def log_event(self, event_type: str, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO statistics (event_type, details) 
                VALUES (?, ?)
            ''', (event_type, details))
            
            conn.commit()
            conn.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

class ManusAPI:
    """–†–∞–±–æ—Ç–∞ —Å Manus API"""
    
    def __init__(self, api_key: str, api_url: str):
        self.api_key = api_key
        self.api_url = api_url
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
    
    def create_task(self, message: str, lead_id: str) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Manus"""
        
        # –ü—Ä–æ–º–ø—Ç —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
        knowledge_base_prompt = f"""
–¢—ã - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ "–í—Å–µ –Ω–∞ —Å–ø–ª–∞–≤". 

–ë–ê–ó–ê –ó–ù–ê–ù–ò–ô:
- –¢—É—Ä—ã –Ω–∞ 3 –¥–Ω—è –ø–æ —Ä–µ–∫–µ –ß—É—Å–æ–≤–∞—è:
  * "–°–µ–º–µ–π–Ω—ã–π —Å–ø–ª–∞–≤" (3 –¥–Ω—è/2 –Ω–æ—á–∏) - 18,000 —Ä—É–±/—á–µ–ª
  * "–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö" (3 –¥–Ω—è/2 –Ω–æ—á–∏) - 20,000 —Ä—É–±/—á–µ–ª
- –í–∫–ª—é—á–µ–Ω–æ: –ø–∏—Ç–∞–Ω–∏–µ, –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ, —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä
- –î–∞—Ç—ã: 15-17 –∏—é–Ω—è, 22-24 –∏—é–Ω—è, 1-3 –∏—é–ª—è
- –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–µ–º–µ–π —Å –¥–µ—Ç—å–º–∏ –æ—Ç 8 –ª–µ—Ç

–ó–ê–î–ê–ß–ê: –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ.

–°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê: {message}

–û—Ç–≤–µ—Ç—å –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ —Å —ç–º–æ–¥–∑–∏ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.
"""
        
        payload = {
            "prompt": knowledge_base_prompt,
            "mode": "quality"
        }
        
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Manus –¥–ª—è —Å–¥–µ–ª–∫–∏ {lead_id}")
            response = requests.post(
                self.api_url,
                headers=self.headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                task_id = data.get('task_id')
                logger.info(f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
                return task_id
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Manus API: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return None

class AmoCRMAPI:
    """–†–∞–±–æ—Ç–∞ —Å AmoCRM API"""
    
    def __init__(self, domain: str, access_token: str):
        self.domain = domain
        self.access_token = access_token
        self.base_url = f"https://{domain}/api/v4"
        self.headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }
    
    def add_note_to_lead(self, lead_id: str, message: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ"""
        
        note_data = {
            "note_type": "common",
            "params": {
                "text": f"ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:\\n\\n{message}"
            }
        }
        
        try:
            url = f"{self.base_url}/leads/{lead_id}/notes"
            response = requests.post(
                url,
                headers=self.headers,
                json=[note_data],
                timeout=30
            )
            
            if response.status_code in [200, 201]:
                logger.info(f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Å–¥–µ–ª–∫–µ {lead_id}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—á–∞–Ω–∏—è: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ AmoCRM API: {e}")
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db_manager = DatabaseManager(Config.DB_PATH)
manus_api = ManusAPI(Config.MANUS_API_KEY, Config.MANUS_API_URL)
amocrm_api = AmoCRMAPI(Config.AMOCRM_DOMAIN, Config.AMOCRM_ACCESS_TOKEN)

@app.route('/amocrm-webhook', methods=['POST'])
def handle_amocrm_webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç AmoCRM"""
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç AmoCRM
        raw_data = request.get_data(as_text=True)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç AmoCRM: {raw_data[:200]}...")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        parsed_data = parse_qs(raw_data)
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = None
        lead_id = None
        
        for key, values in parsed_data.items():
            if 'message[add]' in key and '[text]' in key:
                message_text = values[0] if values else None
            elif 'message[add]' in key and '[entity_id]' in key:
                lead_id = values[0] if values else None
        
        if not message_text or not lead_id:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ ID —Å–¥–µ–ª–∫–∏")
            return jsonify({"status": "error", "message": "Invalid data"}), 400
        
        logger.info(f"üì• –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–¥–µ–ª–∫–∏ {lead_id}: '{message_text}'")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ Manus
        task_id = manus_api.create_task(message_text, lead_id)
        
        if task_id:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db_manager.save_task(task_id, lead_id, message_text)
            db_manager.log_event("amocrm_message_received", f"Lead: {lead_id}, Task: {task_id}")
            
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Manus: {task_id}")
            return jsonify({
                "status": "success", 
                "task_id": task_id,
                "message": "Task sent to Manus"
            })
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ Manus")
            return jsonify({"status": "error", "message": "Failed to create Manus task"}), 500
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AmoCRM webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/manus-webhook', methods=['POST'])
def handle_manus_webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Manus"""
    
    try:
        data = request.get_json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Manus: {json.dumps(data, indent=2)}")
        
        event_type = data.get('event_type')
        task_detail = data.get('task_detail', {})
        task_id = task_detail.get('task_id')
        
        if event_type == 'task_stopped':
            stop_reason = task_detail.get('stop_reason')
            message = task_detail.get('message', '')
            
            if stop_reason == 'finish' and task_id:
                logger.info(f"üéâ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task_id}")
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –∏–∑ –ë–î
                task_info = db_manager.get_task_by_id(task_id)
                
                if task_info:
                    lead_id = task_info['lead_id']
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ë–î
                    db_manager.update_task_response(task_id, message, 'completed')
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ AmoCRM
                    success = amocrm_api.add_note_to_lead(lead_id, message)
                    
                    if success:
                        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ AmoCRM –¥–ª—è —Å–¥–µ–ª–∫–∏ {lead_id}")
                        db_manager.log_event("response_sent", f"Lead: {lead_id}, Task: {task_id}")
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ AmoCRM")
                        db_manager.log_event("response_failed", f"Lead: {lead_id}, Task: {task_id}")
                    
                    return jsonify({
                        "status": "success",
                        "message": "Response processed",
                        "sent_to_amocrm": success
                    })
                else:
                    logger.warning(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
            
            elif stop_reason == 'ask':
                logger.info(f"ü§î –ó–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è: {task_id}")
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        
        elif event_type == 'task_created':
            logger.info(f"üìù –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
            db_manager.log_event("task_created", f"Task: {task_id}")
        
        return jsonify({"status": "success", "message": "Webhook processed"})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Manus webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/status', methods=['GET'])
def get_status():
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    
    try:
        conn = sqlite3.connect(Config.DB_PATH)
        cursor = conn.cursor()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
        cursor.execute("SELECT COUNT(*) FROM tasks")
        total_tasks = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM tasks WHERE status = 'completed'")
        completed_tasks = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM tasks WHERE status = 'created'")
        pending_tasks = cursor.fetchone()[0]
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        cursor.execute("""
            SELECT event_type, timestamp, details 
            FROM statistics 
            ORDER BY timestamp DESC 
            LIMIT 10
        """)
        recent_events = cursor.fetchall()
        
        conn.close()
        
        return jsonify({
            "status": "running",
            "statistics": {
                "total_tasks": total_tasks,
                "completed_tasks": completed_tasks,
                "pending_tasks": pending_tasks
            },
            "recent_events": [
                {
                    "type": event[0],
                    "timestamp": event[1],
                    "details": event[2]
                }
                for event in recent_events
            ]
        })
        
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0"
    })

def print_startup_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ"""
    print("\\n" + "="*60)
    print("üöÄ –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê AmoCRM + Manus –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("="*60)
    print(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
    print(f"üîó AmoCRM Webhook: http://your-domain.com:5000/amocrm-webhook")
    print(f"üîó Manus Webhook: http://your-domain.com:5000/manus-webhook")
    print(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: http://your-domain.com:5000/status")
    print(f"üíö Health Check: http://your-domain.com:5000/health")
    print("="*60)
    print("‚úÖ –ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π!")
    print("üîÑ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: AmoCRM ‚Üí Manus ‚Üí AmoCRM")
    print("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: GitHub Repository")
    print("ü§ñ AI –æ—Ç–≤–µ—Ç—ã: Manus API")
    print("="*60)
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\\n")

if __name__ == '__main__':
    print_startup_info()
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.run(
        host='0.0.0.0',
        port=5000,
        debug=False,
        threaded=True
    )
