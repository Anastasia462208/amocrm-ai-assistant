// üõ°Ô∏è AmoCRM –§–ò–ù–ê–õ–¨–ù–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¢–û–õ–¨–ö–û –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ—è–≤–∏–≤—à–∏–µ—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞

console.log('üõ°Ô∏è AmoCRM –§–ò–ù–ê–õ–¨–ù–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    checkInterval: 15000,  // 15 —Å–µ–∫—É–Ω–¥ - –µ—â–µ –±–æ–ª—å—à–µ
    responseDelay: 5000,   // 5 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∞
    maxMessages: 5,        // –¢–æ–ª—å–∫–æ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    cooldownPeriod: 60000  // 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏
};

// –ì–æ—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
const RESPONSES = {
    tour3Days: `üö£‚Äç‚ôÇÔ∏è –¢—É—Ä—ã –Ω–∞ 3 –¥–Ω—è –ø–æ —Ä–µ–∫–µ –ß—É—Å–æ–≤–∞—è:

üåü "–°–µ–º–µ–π–Ω—ã–π —Å–ø–ª–∞–≤" (3 –¥–Ω—è/2 –Ω–æ—á–∏)
üí∞ –¶–µ–Ω–∞: 18,000 —Ä—É–±/—á–µ–ª
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –î–ª—è —Å–µ–º–µ–π —Å –¥–µ—Ç—å–º–∏ –æ—Ç 8 –ª–µ—Ç
üìç –ú–∞—Ä—à—Ä—É—Ç: –ö–æ—É—Ä–æ–≤–∫–∞ - –ß—É—Å–æ–≤–∞—è

üåü "–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö" (3 –¥–Ω—è/2 –Ω–æ—á–∏)  
üí∞ –¶–µ–Ω–∞: 20,000 —Ä—É–±/—á–µ–ª
üèÉ‚Äç‚ôÇÔ∏è –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–∏—Å—Ç–æ–≤
üìç –ú–∞—Ä—à—Ä—É—Ç: –°—Ç–∞—Ä–æ—É—Ç–∫–∏–Ω—Å–∫ - –ß—É—Å–æ–≤–∞—è

–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–æ:
‚úÖ –†–∞—Ñ—Ç –∏ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
‚úÖ –¢—Ä–µ—Ö—Ä–∞–∑–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
‚úÖ –û–ø—ã—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
‚úÖ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä –æ—Ç/–¥–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞

üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã: 15-17 –∏—é–Ω—è, 22-24 –∏—é–Ω—è, 29 –∏—é–Ω—è-1 –∏—é–ª—è

–ö–∞–∫–æ–π —Ç—É—Ä –≤–∞—Å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üòä`,

    default: `–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! üòä

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
‚Ä¢ –ö–∞–∫–æ–π —Ç—É—Ä (–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)?
‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞—Ç—ã?
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?

–ü–æ–¥–±–µ—Ä—É –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!`
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let isRunning = false;
let intervalId = null;
let messageCount = 0;
let lastResponseTime = 0;

// –ù–û–í–´–ô –ü–û–î–•–û–î: –°–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
let initialMessageCount = 0;
let initialMessages = [];
let startTime = 0;

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
function findChatInput() {
    const selectors = [
        '.control-contenteditable__area.feed-compose__message[contenteditable="true"]',
        'div[contenteditable="true"][data-hint*="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç"]',
        'div[contenteditable="true"]',
        'textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"]'
    ];
    
    for (const selector of selectors) {
        try {
            const element = document.querySelector(selector);
            if (element && element.offsetParent !== null) {
                return element;
            }
        } catch (e) {
            console.debug(`–°–µ–ª–µ–∫—Ç–æ—Ä ${selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª`);
        }
    }
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ Enter)
function sendMessage(messageText) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
        const now = Date.now();
        if (now - lastResponseTime < CONFIG.cooldownPeriod) {
            console.log('‚è≥ Cooldown –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É');
            return false;
        }
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageText.substring(0, 50) + '...');
        
        const inputField = findChatInput();
        if (!inputField) {
            console.error('‚ùå –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return false;
        }
        
        inputField.focus();
        
        // –û—á–∏—â–∞–µ–º –∏ –≤–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
        if (inputField.contentEditable === 'true') {
            inputField.innerHTML = '';
            inputField.textContent = messageText;
        } else {
            inputField.value = '';
            inputField.value = messageText;
        }
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–≤–æ–¥
        const inputEvent = new Event('input', { bubbles: true });
        inputField.dispatchEvent(inputEvent);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Enter
        setTimeout(() => {
            const enterEvent = new KeyboardEvent('keydown', {
                key: 'Enter',
                code: 'Enter',
                keyCode: 13,
                which: 13,
                bubbles: true
            });
            inputField.dispatchEvent(enterEvent);
            
            console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Enter');
            lastResponseTime = Date.now();
        }, 1000);
        
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function analyzeMessage(messageText) {
    const text = messageText.toLowerCase();
    
    if (text.includes('3 –¥–Ω—è') || text.includes('—Ç—Ä–∏ –¥–Ω—è') || text.includes('—Ç—Ä–µ—Ö–¥–Ω–µ–≤–Ω—ã–π')) {
        return RESPONSES.tour3Days;
    }
    
    return RESPONSES.default;
}

// –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è: –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function createInitialSnapshot() {
    try {
        const messageSelectors = [
            '.feed-note__message_paragraph',
            '.feed-note',
            '[class*="message"]'
        ];
        
        let allMessages = [];
        
        for (const selector of messageSelectors) {
            try {
                const elements = document.querySelectorAll(selector);
                for (const element of elements) {
                    const text = element.textContent.trim();
                    if (text && text.length > 3) {
                        allMessages.push({
                            text: text,
                            timestamp: Date.now(),
                            element: element
                        });
                    }
                }
                if (allMessages.length > 0) break;
            } catch (e) {
                console.debug(`–°–µ–ª–µ–∫—Ç–æ—Ä ${selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª`);
            }
        }
        
        initialMessages = allMessages;
        initialMessageCount = allMessages.length;
        startTime = Date.now();
        
        console.log(`üì∏ –°–æ–∑–¥–∞–Ω —Å–Ω–∏–º–æ–∫: ${initialMessageCount} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏`);
        console.log('üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:', new Date(startTime).toLocaleTimeString());
        
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞:', error);
        return false;
    }
}

// –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è: –ü–æ–∏—Å–∫ –¢–û–õ–¨–ö–û –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function findTrulyNewMessages() {
    try {
        const messageSelectors = [
            '.feed-note__message_paragraph',
            '.feed-note',
            '[class*="message"]'
        ];
        
        let currentMessages = [];
        
        for (const selector of messageSelectors) {
            try {
                const elements = document.querySelectorAll(selector);
                for (const element of elements) {
                    const text = element.textContent.trim();
                    if (text && text.length > 3) {
                        currentMessages.push({
                            text: text,
                            element: element
                        });
                    }
                }
                if (currentMessages.length > 0) break;
            } catch (e) {
                console.debug(`–°–µ–ª–µ–∫—Ç–æ—Ä ${selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª`);
            }
        }
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —Å–Ω–∏–º–∫–æ–º
        const newMessages = [];
        
        if (currentMessages.length > initialMessageCount) {
            // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–Ω–∏–º–∫–µ
            const newCount = currentMessages.length - initialMessageCount;
            const potentialNewMessages = currentMessages.slice(-newCount);
            
            for (const msg of potentialNewMessages) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                const isOurMessage = msg.text.includes('üö£‚Äç‚ôÇÔ∏è') || 
                                   msg.text.includes('üí∞') || 
                                   msg.text.includes('üìÖ') ||
                                   msg.text.includes('üòä') ||
                                   msg.text.includes('–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –±—ã–ª–æ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–Ω–∏–º–∫–µ
                const wasInInitial = initialMessages.some(initial => 
                    initial.text === msg.text
                );
                
                if (!isOurMessage && !wasInInitial) {
                    newMessages.push(msg);
                }
            }
        }
        
        return newMessages;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        return [];
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function monitorNewMessages() {
    if (!isRunning) return;
    
    try {
        const newMessages = findTrulyNewMessages();
        
        if (newMessages.length > 0) {
            console.log(`üì® –ù–∞–π–¥–µ–Ω–æ –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${newMessages.length}`);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const msg = newMessages[0];
            
            console.log(`üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${msg.text.substring(0, 50)}...`);
            
            const response = analyzeMessage(msg.text);
            
            if (sendMessage(response)) {
                messageCount++;
                console.log(`‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageCount} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–Ω–∏–º–æ–∫
                initialMessageCount++;
                initialMessages.push({
                    text: msg.text,
                    timestamp: Date.now()
                });
                
                if (messageCount >= CONFIG.maxMessages) {
                    console.log('üõë –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é');
                    stopAutomationFinal();
                }
            }
        } else {
            console.log('üîç –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
function startAutomationFinal() {
    if (isRunning) {
        console.log('‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞');
        return;
    }
    
    console.log('üõ°Ô∏è –ó–∞–ø—É—Å–∫ –§–ò–ù–ê–õ–¨–ù–û–ô –ë–ï–ó–û–ü–ê–°–ù–û–ô –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...');
    
    // –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (!createInitialSnapshot()) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–Ω–∏–º–æ–∫, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞');
        return;
    }
    
    console.log('üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ', CONFIG.checkInterval / 1000, '—Å–µ–∫—É–Ω–¥');
    console.log('‚è≥ Cooldown –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏:', CONFIG.cooldownPeriod / 1000, '—Å–µ–∫—É–Ω–¥');
    console.log('üî¢ –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π:', CONFIG.maxMessages);
    console.log('üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: stopAutomationFinal()');
    
    isRunning = true;
    intervalId = setInterval(monitorNewMessages, CONFIG.checkInterval);
    
    console.log('‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!');
    console.log('üì∏ –û—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ—è–≤–∏–≤—à–∏–µ—Å—è –ü–û–°–õ–ï —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞');
}

// –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
function stopAutomationFinal() {
    if (!isRunning) {
        console.log('‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞');
        return;
    }
    
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...');
    
    isRunning = false;
    if (intervalId) {
        clearInterval(intervalId);
        intervalId = null;
    }
    
    console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log('  üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ù–û–í–´–• —Å–æ–æ–±—â–µ–Ω–∏–π:', messageCount);
    console.log('  üì∏ –ù–∞—á–∞–ª—å–Ω—ã–π —Å–Ω–∏–º–æ–∫:', initialMessageCount, '—Å–æ–æ–±—â–µ–Ω–∏–π');
    console.log('  üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:', Math.round((Date.now() - startTime) / 1000), '—Å–µ–∫—É–Ω–¥');
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
function showStatusFinal() {
    console.log('üìä –°–¢–ê–¢–£–° –§–ò–ù–ê–õ–¨–ù–û–ô –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò:');
    console.log('  üîÑ –ó–∞–ø—É—â–µ–Ω–∞:', isRunning ? '–î–∞' : '–ù–µ—Ç');
    console.log('  üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ù–û–í–´–• —Å–æ–æ–±—â–µ–Ω–∏–π:', messageCount);
    console.log('  üì∏ –ù–∞—á–∞–ª—å–Ω—ã–π —Å–Ω–∏–º–æ–∫:', initialMessageCount, '—Å–æ–æ–±—â–µ–Ω–∏–π');
    console.log('  ‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:', CONFIG.checkInterval / 1000, '—Å–µ–∫');
    console.log('  ‚è≥ Cooldown:', CONFIG.cooldownPeriod / 1000, '—Å–µ–∫');
    console.log('  üî¢ –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π:', CONFIG.maxMessages);
    
    const inputField = findChatInput();
    console.log('  üìù –ü–æ–ª–µ –≤–≤–æ–¥–∞:', inputField ? '‚úÖ –ù–∞–π–¥–µ–Ω–æ' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ');
    
    if (startTime > 0) {
        console.log('  üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:', new Date(startTime).toLocaleTimeString());
        console.log('  ‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:', Math.round((Date.now() - startTime) / 1000), '—Å–µ–∫');
    }
    
    const lastResponse = lastResponseTime ? new Date(lastResponseTime).toLocaleTimeString() : '–ù–∏–∫–æ–≥–¥–∞';
    console.log('  üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç:', lastResponse);
}

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function testSendMessageFinal() {
    const testMessage = 'üß™ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏';
    console.log('üß™ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');
    
    if (sendMessage(testMessage)) {
        console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
    } else {
        console.log('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
window.startAutomationFinal = startAutomationFinal;
window.stopAutomationFinal = stopAutomationFinal;
window.showStatusFinal = showStatusFinal;
window.testSendMessageFinal = testSendMessageFinal;

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
console.log(`
üõ°Ô∏è AmoCRM –§–ò–ù–ê–õ–¨–ù–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!

üìã –ö–û–ú–ê–ù–î–´:
  startAutomationFinal()  - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
  stopAutomationFinal()   - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é  
  testSendMessageFinal()  - –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
  showStatusFinal()       - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å

üîí –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
  ‚úÖ –°–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¢–û–õ–¨–ö–û –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  ‚úÖ –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
  ‚úÖ Cooldown 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏
  ‚úÖ –õ–∏–º–∏—Ç 5 —Å–æ–æ–±—â–µ–Ω–∏–π –º–∞–∫—Å–∏–º—É–º
  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥

üöÄ –î–ª—è –Ω–∞—á–∞–ª–∞: startAutomationFinal()
`);

setTimeout(() => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');
    showStatusFinal();
}, 1000);
