#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Manus API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏: fast, quality
"""

import requests
import json

# API –∫–ª—é—á Manus
MANUS_API_KEY = "sk-w3WopZM2I_Wxoltnbv0BHXP_ygv3cb53HW3Wa0Myp18ZP_ol1EfrF9gorM4Nl8rycZLLJupyvG_Y80aMtr7gpsgeogoc"

def test_manus_api_final():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏: fast, quality"""
    
    url = "https://api.manus.im/v1/tasks"
    headers = {
        "API_KEY": MANUS_API_KEY,
        "Content-Type": "application/json"
    }
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Å–æ–≥–ª–∞—Å–Ω–æ –æ—à–∏–±–∫–µ API
    modes = ["fast", "quality"]
    
    prompt = """
    –¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –ø–æ —Ä–µ—á–Ω—ã–º —Å–ø–ª–∞–≤–∞–º "–í—Å–µ –Ω–∞ —Å–ø–ª–∞–≤".
    
    –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:
    - –ß—É—Å–æ–≤–∞—è: —Å–µ–º–µ–π–Ω—ã–µ —Å–ø–ª–∞–≤—ã 2-5 –¥–Ω–µ–π, —Ü–µ–Ω—ã –æ—Ç 15000 —Ä—É–±
    - –°–µ—Ä–≥–∞: –æ–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–µ —Å–ø–ª–∞–≤—ã, —Ü–µ–Ω—ã –æ—Ç 3500 —Ä—É–±
    
    –í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å–µ–º–µ–π–Ω—ã–π —Å–ø–ª–∞–≤ –Ω–∞ 3 –¥–Ω—è –≤ –∏—é–Ω–µ. –°–∫–æ–ª—å–∫–æ —ç—Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å –¥–ª—è 2 –≤–∑—Ä–æ—Å–ª—ã—Ö –∏ 1 —Ä–µ–±–µ–Ω–∫–∞?
    
    –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.
    """
    
    print(f"üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º Manus API: {url}")
    print(f"üîë API Key: {MANUS_API_KEY[:20]}...")
    print()
    
    for mode in modes:
        payload = {
            "prompt": prompt.strip(),
            "mode": mode,
            "attachments": []
        }
        
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∂–∏–º: {mode}")
        
        try:
            response = requests.post(url, headers=headers, json=payload, timeout=60)
            
            print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                try:
                    result = response.json()
                    print(f"   üéâ –£–°–ü–ï–•! –†–µ–∂–∏–º '{mode}' —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    print(f"   üìù –û—Ç–≤–µ—Ç: {json.dumps(result, ensure_ascii=False, indent=2)}")
                    return mode, result
                except:
                    print(f"   üìù –û—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç): {response.text}")
                    return mode, response.text
            elif response.status_code == 401:
                print(f"   üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                
        except requests.exceptions.RequestException as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        print()
    
    return None, None

def create_manus_client():
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Manus API"""
    
    class ManusClient:
        def __init__(self, api_key):
            self.api_key = api_key
            self.base_url = "https://api.manus.im/v1/tasks"
            self.headers = {
                "API_KEY": api_key,
                "Content-Type": "application/json"
            }
        
        def send_request(self, prompt, mode="fast", attachments=None):
            """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Manus API"""
            if attachments is None:
                attachments = []
            
            payload = {
                "prompt": prompt,
                "mode": mode,
                "attachments": attachments
            }
            
            try:
                response = requests.post(
                    self.base_url, 
                    headers=self.headers, 
                    json=payload, 
                    timeout=60
                )
                
                if response.status_code == 200:
                    return True, response.json()
                else:
                    return False, f"Error {response.status_code}: {response.text}"
                    
            except Exception as e:
                return False, f"Exception: {str(e)}"
    
    return ManusClient(MANUS_API_KEY)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    mode, result = test_manus_api_final()
    
    if result:
        print("\n" + "="*60)
        print("üéâ MANUS API –†–ê–ë–û–¢–ê–ï–¢!")
        print("="*60)
        print(f"–†–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º: {mode}")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, ensure_ascii=False, indent=2) if isinstance(result, dict) else result}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        client = create_manus_client()
        print("\nüöÄ –ö–ª–∏–µ–Ω—Ç Manus API —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("   –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: fast, quality")
        print("   –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –¥–ª—è 200 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤!")
        
    else:
        print("\nüòû API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É Manus.")
