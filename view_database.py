#!/usr/bin/env python3
"""
–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏
"""

import sqlite3
from datetime import datetime
import json

def view_database(db_path='conversations.db'):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    try:
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        print("üìä –°–û–î–ï–†–ñ–ò–ú–û–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 80)
        
        # –ö–ª–∏–µ–Ω—Ç—ã
        print("\\nüë• –ö–õ–ò–ï–ù–¢–´:")
        cursor.execute("SELECT * FROM clients ORDER BY created_at")
        clients = cursor.fetchall()
        
        if clients:
            for client in clients:
                print(f"  ID: {client['id']} | AmoCRM Contact: {client['amocrm_contact_id']} | –ò–º—è: {client['name']}")
        else:
            print("  –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤")
        
        # –†–∞–∑–≥–æ–≤–æ—Ä—ã
        print("\\nüí¨ –†–ê–ó–ì–û–í–û–†–´:")
        cursor.execute("""
            SELECT c.*, cl.name as client_name 
            FROM conversations c 
            JOIN clients cl ON c.client_id = cl.id 
            ORDER BY c.created_at
        """)
        conversations = cursor.fetchall()
        
        if conversations:
            for conv in conversations:
                print(f"  ID: {conv['id']} | –ö–ª–∏–µ–Ω—Ç: {conv['client_name']} | AmoCRM Lead: {conv['amocrm_lead_id']} | –°—Ç–∞—Ç—É—Å: {conv['status']}")
        else:
            print("  –ù–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º
        print("\\nüìù –ò–°–¢–û–†–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô:")
        
        for conv in conversations:
            print(f"\\nüóÇÔ∏è –†–∞–∑–≥–æ–≤–æ—Ä {conv['id']} (AmoCRM Lead: {conv['amocrm_lead_id']}):")
            
            cursor.execute("""
                SELECT * FROM messages 
                WHERE conversation_id = ? 
                ORDER BY timestamp
            """, (conv['id'],))
            messages = cursor.fetchall()
            
            if messages:
                for msg in messages:
                    sender_icon = "üë§" if msg['sender_type'] == 'client' else "ü§ñ"
                    timestamp = datetime.fromisoformat(msg['timestamp'].replace('Z', '+00:00'))
                    
                    print(f"    {sender_icon} {msg['sender_type'].upper()}: {msg['content']}")
                    print(f"       üìÖ {timestamp.strftime('%Y-%m-%d %H:%M:%S')}")
                    
                    if msg['metadata']:
                        try:
                            metadata = json.loads(msg['metadata'])
                            print(f"       üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}")
                        except:
                            print(f"       üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {msg['metadata']}")
                    print()
            else:
                print("    –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        
        cursor.execute("SELECT COUNT(*) as count FROM clients")
        clients_count = cursor.fetchone()['count']
        
        cursor.execute("SELECT COUNT(*) as count FROM conversations")
        conversations_count = cursor.fetchone()['count']
        
        cursor.execute("SELECT COUNT(*) as count FROM messages")
        messages_count = cursor.fetchone()['count']
        
        cursor.execute("SELECT COUNT(*) as count FROM messages WHERE sender_type = 'client'")
        client_messages = cursor.fetchone()['count']
        
        cursor.execute("SELECT COUNT(*) as count FROM messages WHERE sender_type = 'assistant'")
        assistant_messages = cursor.fetchone()['count']
        
        print(f"  üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {clients_count}")
        print(f"  üí¨ –í—Å–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {conversations_count}")
        print(f"  üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_count}")
        print(f"  üë§ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤: {client_messages}")
        print(f"  ü§ñ –û—Ç–≤–µ—Ç–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {assistant_messages}")
        
        conn.close()
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {db_path}")
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

def search_messages_by_lead(lead_id, db_path='conversations.db'):
    """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ ID —Å–¥–µ–ª–∫–∏"""
    
    try:
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        print(f"üîç –ü–û–ò–°–ö –°–û–û–ë–©–ï–ù–ò–ô –î–õ–Ø –°–î–ï–õ–ö–ò {lead_id}")
        print("=" * 60)
        
        cursor.execute("""
            SELECT m.*, c.amocrm_lead_id, cl.name as client_name
            FROM messages m
            JOIN conversations c ON m.conversation_id = c.id
            JOIN clients cl ON c.client_id = cl.id
            WHERE c.amocrm_lead_id = ?
            ORDER BY m.timestamp
        """, (lead_id,))
        
        messages = cursor.fetchall()
        
        if messages:
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π:")
            print()
            
            for msg in messages:
                sender_icon = "üë§" if msg['sender_type'] == 'client' else "ü§ñ"
                timestamp = datetime.fromisoformat(msg['timestamp'].replace('Z', '+00:00'))
                
                print(f"{sender_icon} {msg['sender_type'].upper()}: {msg['content']}")
                print(f"   üìÖ {timestamp.strftime('%Y-%m-%d %H:%M:%S')}")
                print()
        else:
            print(f"–°–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–¥–µ–ª–∫–∏ {lead_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    import sys
    
    if len(sys.argv) > 1:
        # –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–¥–µ–ª–∫–µ
        lead_id = int(sys.argv[1])
        search_messages_by_lead(lead_id)
    else:
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        view_database()
