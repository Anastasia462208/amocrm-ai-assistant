#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏–∑ amoCRM API
–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –ø–æ —Å–¥–µ–ª–∫–∞–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ JSON —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
"""

import requests
import json
import time
from datetime import datetime
from typing import List, Dict, Optional
import argparse

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è amoCRM API
SUBDOMAIN = 'amoshturm'
ACCESS_TOKEN = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjBjYjliYjRhZmI3ODNiOWNiMDA2Mzg5NWE1Nzg5MjhjMGViNDZlZTcxYzc2MGUwNGFjNTE3OGUzNWE4Mzk2MWZjNWI2NzQ2NDRjN2U5YmRlIn0.eyJhdWQiOiI3NWMyYjNlYi1kODM3LTQwNzktYjNkYS04YzJmOWU0OTRkNjYiLCJqdGkiOiIwY2I5YmI0YWZiNzgzYjljYjAwNjM4OTVhNTc4OTI4YzBlYjQ2ZWU3MWM3NjBlMDRhYzUxNzhlMzVhODM5NjFmYzViNjc0NjQ0YzdlOWJkZSIsImlhdCI6MTc0NTg0ODE4MiwibmJmIjoxNzQ1ODQ4MTgyLCJleHAiOjE4ODU0MjA4MDAsInN1YiI6IjEwNzg5NjU4IiwiZ3JhbnRfdHlwZSI6IiIsImFjY291bnRfaWQiOjMxNjI2NTMwLCJiYXNlX2RvbWFpbiI6ImFtb2NybS5ydSIsInZlcnNpb24iOjIsInNjb3BlcyI6WyJjcm0iLCJmaWxlcyIsImZpbGVzX2RlbGV0ZSIsIm5vdGlmaWNhdGlvbnMiLCJwdXNoX25vdGlmaWNhdGlvbnMiXSwiaGFzaF91dWlkIjoiZjdkNTczZWYtNWI0Zi00MjU2LWI1OGYtNjE3ODdmN2Q1ZmNlIiwiYXBpX2RvbWFpbiI6ImFwaS1iLmFtb2NybS5ydSJ9.GWNXTAz3_DPtNHZbBAiPkg9k77cwfhAnMZeMIfU15r9XMQ5g6r8EyH90xU4PLluNoi5kRRWxyimVELfuoK8JWS8fSYSEezxjwlPUsp2rBEbAlvD0AVVVtMcjRjicUSQ-qB7avcTHCsOSXR-P-ZkMkGcE0B_2RA-DqsxqYGHxnuQHtzDSmw8lgnl0aVrbBULhVIZEAK7gTufQTWJDDmcMttEYqYU-Bd2XReJ0f96K6k68b7CErnjp-uyRmjLEgKhkpdsF8Cx6bioqACXUqSPUNRmd6sRTU5RYC3J3SlTJONcx6TFToAfnXof0cjwnlxluetl8rwafrAulTr1kTrJeXQ"

# –¢–∏–ø—ã –ø—Ä–∏–º–µ—á–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
MESSAGE_NOTE_TYPES = [
    'common',           # –û–±—ã—á–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
    'call_in',          # –í—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏
    'call_out',         # –ò—Å—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏
    'service_message',  # –°–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    'mail_message',     # Email —Å–æ–æ–±—â–µ–Ω–∏—è
    'sms_in',          # –í—Ö–æ–¥—è—â–∏–µ SMS
    'sms_out',         # –ò—Å—Ö–æ–¥—è—â–∏–µ SMS
    'message_cashier'   # –°–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Å—Å–∏—Ä–∞
]

class AmoCRMExporter:
    def __init__(self, subdomain: str, access_token: str):
        self.subdomain = subdomain
        self.access_token = access_token
        self.base_url = f"https://{subdomain}.amocrm.ru/api/v4"
        self.headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }
        self.stats = {
            'leads_processed': 0,
            'notes_found': 0,
            'messages_extracted': 0,
            'api_requests': 0,
            'errors': 0
        }
    
    def make_request(self, endpoint: str, params: Dict = None) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API amoCRM —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        url = f"{self.base_url}/{endpoint}"
        
        try:
            self.stats['api_requests'] += 1
            response = requests.get(url, headers=self.headers, params=params)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–æ–≤ API
            if response.status_code == 429:
                print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç API, –æ–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—ã...")
                time.sleep(1)
                return self.make_request(endpoint, params)
            
            response.raise_for_status()
            return response.json()
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞ –∫ {endpoint}: {e}")
            self.stats['errors'] += 1
            return None
    
    def get_all_leads(self, limit: int = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫"""
        print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫...")
        
        leads = []
        page = 1
        
        while True:
            params = {
                'page': page,
                'limit': 250  # –ú–∞–∫—Å–∏–º—É–º –∑–∞ –∑–∞–ø—Ä–æ—Å
            }
            
            if limit and len(leads) >= limit:
                break
            
            data = self.make_request("leads", params)
            if not data or '_embedded' not in data or 'leads' not in data['_embedded']:
                break
            
            page_leads = data['_embedded']['leads']
            if not page_leads:
                break
            
            leads.extend(page_leads)
            print(f"  üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –ø–æ–ª—É—á–µ–Ω–æ {len(page_leads)} —Å–¥–µ–ª–æ–∫")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏–º–∏—Ç, –æ–±—Ä–µ–∑–∞–µ–º —Å–ø–∏—Å–æ–∫
            if limit and len(leads) >= limit:
                leads = leads[:limit]
                break
            
            page += 1
            time.sleep(0.2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {len(leads)}")
        return leads
    
    def get_lead_notes(self, lead_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        notes = []
        page = 1
        
        while True:
            params = {
                'page': page,
                'limit': 250
            }
            
            data = self.make_request(f"leads/{lead_id}/notes", params)
            if not data or '_embedded' not in data or 'notes' not in data['_embedded']:
                break
            
            page_notes = data['_embedded']['notes']
            if not page_notes:
                break
            
            notes.extend(page_notes)
            page += 1
            time.sleep(0.1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        return notes
    
    def extract_message_from_note(self, note: Dict) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è"""
        note_type = note.get('note_type', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if note_type not in MESSAGE_NOTE_TYPES:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
        text = None
        sender_type = 'unknown'
        
        if 'params' in note:
            params = note['params']
            
            if note_type == 'common':
                text = params.get('text', '')
                sender_type = 'client'  # –û–±—ã—á–Ω–æ –æ–±—ã—á–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
                
            elif note_type in ['call_in', 'call_out']:
                # –î–ª—è –∑–≤–æ–Ω–∫–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
                text = params.get('text', '') or f"–ó–≤–æ–Ω–æ–∫ ({note_type})"
                sender_type = 'client' if note_type == 'call_in' else 'assistant'
                
            elif note_type in ['sms_in', 'sms_out']:
                text = params.get('text', '')
                sender_type = 'client' if note_type == 'sms_in' else 'assistant'
                
            elif note_type == 'mail_message':
                text = params.get('text', '') or params.get('subject', '')
                sender_type = 'client'  # –û–±—ã—á–Ω–æ –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞
                
            elif note_type == 'service_message':
                text = params.get('text', '')
                sender_type = 'system'
        
        if not text or not text.strip():
            return None
        
        return {
            'id': note['id'],
            'text': text.strip(),
            'sender_type': sender_type,
            'note_type': note_type,
            'created_at': note.get('created_at', 0),
            'updated_at': note.get('updated_at', 0),
            'created_by': note.get('created_by', 0)
        }
    
    def export_lead_history(self, lead_id: int) -> Dict:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        print(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–¥–µ–ª–∫–∏ {lead_id}...")
        
        notes = self.get_lead_notes(lead_id)
        self.stats['notes_found'] += len(notes)
        
        messages = []
        for note in notes:
            message = self.extract_message_from_note(note)
            if message:
                messages.append(message)
                self.stats['messages_extracted'] += 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        messages.sort(key=lambda x: x['created_at'])
        
        print(f"  üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π: {len(notes)}")
        print(f"  üí¨ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        
        return {
            'lead_id': lead_id,
            'total_notes': len(notes),
            'messages': messages,
            'exported_at': int(datetime.now().timestamp())
        }
    
    def export_all_history(self, output_file: str = 'amocrm_history.json', limit: int = None) -> bool:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫"""
        print("üöÄ –≠–ö–°–ü–û–†–¢ –ò–°–¢–û–†–ò–ò –ü–ï–†–ï–ü–ò–°–ö–ò –ò–ó AMOCRM")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫
        leads = self.get_all_leads(limit)
        if not leads:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫")
            return False
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏
        export_data = {
            'export_info': {
                'subdomain': self.subdomain,
                'exported_at': datetime.now().isoformat(),
                'total_leads': len(leads),
                'api_requests': 0,
                'version': '1.0'
            },
            'leads': []
        }
        
        for i, lead in enumerate(leads, 1):
            lead_id = lead['id']
            print(f"\\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(leads)} ({i/len(leads)*100:.1f}%)")
            
            lead_history = self.export_lead_history(lead_id)
            export_data['leads'].append(lead_history)
            
            self.stats['leads_processed'] += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
            time.sleep(0.3)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ
        export_data['export_info']['api_requests'] = self.stats['api_requests']
        export_data['export_info']['stats'] = self.stats
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2)
            
            print(f"\\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
            self.print_stats()
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def print_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        print("\\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –≠–ö–°–ü–û–†–¢–ê:")
        print("=" * 40)
        print(f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–¥–µ–ª–æ–∫: {self.stats['leads_processed']}")
        print(f"üìù –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π: {self.stats['notes_found']}")
        print(f"üí¨ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats['messages_extracted']}")
        print(f"üåê API –∑–∞–ø—Ä–æ—Å–æ–≤: {self.stats['api_requests']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}")

def main():
    parser = argparse.ArgumentParser(description='–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏–∑ amoCRM')
    parser.add_argument('--output', '-o', default='amocrm_history.json', 
                       help='–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: amocrm_history.json)')
    parser.add_argument('--limit', '-l', type=int, 
                       help='–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)')
    parser.add_argument('--lead-id', type=int,
                       help='–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–¥–µ–ª–∫—É')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
    exporter = AmoCRMExporter(SUBDOMAIN, ACCESS_TOKEN)
    
    if args.lead_id:
        # –≠–∫—Å–ø–æ—Ä—Ç –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏
        print(f"üéØ –≠–∫—Å–ø–æ—Ä—Ç —Å–¥–µ–ª–∫–∏ {args.lead_id}")
        lead_history = exporter.export_lead_history(args.lead_id)
        
        export_data = {
            'export_info': {
                'subdomain': SUBDOMAIN,
                'exported_at': datetime.now().isoformat(),
                'total_leads': 1,
                'single_lead_export': True,
                'version': '1.0'
            },
            'leads': [lead_history]
        }
        
        try:
            with open(args.output, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —Å–¥–µ–ª–∫–∏ {args.lead_id} –∑–∞–≤–µ—Ä—à–µ–Ω: {args.output}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    else:
        # –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
        success = exporter.export_all_history(args.output, args.limit)
        if not success:
            exit(1)

if __name__ == '__main__':
    main()
