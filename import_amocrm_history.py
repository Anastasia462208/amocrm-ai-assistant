#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏–∑ amoCRM –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
–ß–∏—Ç–∞–µ—Ç JSON —Ñ–∞–π–ª, —Å–æ–∑–¥–∞–Ω–Ω—ã–π export_amocrm_history.py, –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ SQLite –±–∞–∑—É
"""

import json
import argparse
from datetime import datetime
from typing import Dict, List, Optional
from database_manager import DatabaseManager

class HistoryImporter:
    def __init__(self, db_path: str = 'conversations.db'):
        self.db = DatabaseManager(db_path)
        self.stats = {
            'leads_processed': 0,
            'clients_created': 0,
            'conversations_created': 0,
            'messages_imported': 0,
            'messages_skipped': 0,
            'errors': 0
        }
    
    def load_export_data(self, file_path: str) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {file_path}")
            
            if 'export_info' in data:
                info = data['export_info']
                print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ:")
                print(f"  üè¢ –ü–æ–¥–¥–æ–º–µ–Ω: {info.get('subdomain', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"  üìÖ –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {info.get('exported_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"  üìã –°–¥–µ–ª–æ–∫ –≤ —Ñ–∞–π–ª–µ: {info.get('total_leads', 0)}")
            
            return data
            
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return None
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return None
    
    def determine_sender_type(self, message: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        sender_type = message.get('sender_type', 'unknown')
        note_type = message.get('note_type', '')
        
        # –£—Ç–æ—á–Ω—è–µ–º —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
        if note_type == 'call_in' or note_type == 'sms_in':
            return 'client'
        elif note_type == 'call_out' or note_type == 'sms_out':
            return 'assistant'
        elif note_type == 'service_message':
            return 'system'
        elif sender_type in ['client', 'assistant', 'system']:
            return sender_type
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            return 'client'
    
    def import_lead_history(self, lead_data: Dict) -> bool:
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        lead_id = lead_data['lead_id']
        messages = lead_data.get('messages', [])
        
        if not messages:
            print(f"  ‚ö†Ô∏è –°–¥–µ–ª–∫–∞ {lead_id}: –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
            return True
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞
            client_id = self.db.get_or_create_client(
                amocrm_contact_id=lead_id,
                name=f"–ö–ª–∏–µ–Ω—Ç –∏–∑ —Å–¥–µ–ª–∫–∏ {lead_id}"
            )
            
            if client_id is None:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ {lead_id}")
                self.stats['errors'] += 1
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º—ã –Ω–µ –º–æ–∂–µ–º –ª–µ–≥–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª –ª–∏ —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            # –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä
            conversation_id = self.db.get_or_create_conversation(
                client_id=client_id,
                amocrm_lead_id=lead_id
            )
            
            if conversation_id is None:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è —Å–¥–µ–ª–∫–∏ {lead_id}")
                self.stats['errors'] += 1
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ —Ä–∞–∑–≥–æ–≤–æ—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º–∏ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
            existing_messages = self.db.get_conversation_context(conversation_id, limit=1)
            if existing_messages:
                print(f"  ‚ö†Ô∏è –°–¥–µ–ª–∫–∞ {lead_id}: —Ä–∞–∑–≥–æ–≤–æ—Ä —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                self.stats['messages_skipped'] += len(messages)
                return True
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            imported_count = 0
            for message in messages:
                sender_type = self.determine_sender_type(message)
                
                # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata = {
                    'amocrm_lead_id': lead_id,
                    'amocrm_note_id': message.get('id'),
                    'note_type': message.get('note_type'),
                    'amocrm_timestamp': message.get('created_at', 0),
                    'source': 'history_import',
                    'created_by': message.get('created_by')
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
                message_id = self.db.add_message(
                    conversation_id=conversation_id,
                    sender_type=sender_type,
                    content=message['text'],
                    message_type='text',
                    metadata=metadata
                )
                
                if message_id:
                    imported_count += 1
                    self.stats['messages_imported'] += 1
                else:
                    print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {message['text'][:50]}...")
                    self.stats['errors'] += 1
            
            print(f"  ‚úÖ –°–¥–µ–ª–∫–∞ {lead_id}: –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count}/{len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å–¥–µ–ª–∫–∏ {lead_id}: {e}")
            self.stats['errors'] += 1
            return False
    
    def import_history(self, file_path: str, dry_run: bool = False) -> bool:
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        print("üì• –ò–ú–ü–û–†–¢ –ò–°–¢–û–†–ò–ò –ü–ï–†–ï–ü–ò–°–ö–ò –í –ë–ê–ó–£ –î–ê–ù–ù–´–•")
        print("=" * 60)
        
        if dry_run:
            print("üß™ –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø (–∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)")
            print("=" * 60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = self.load_export_data(file_path)
        if not export_data:
            return False
        
        leads = export_data.get('leads', [])
        if not leads:
            print("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö")
            return False
        
        print(f"\\nüìã –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç {len(leads)} —Å–¥–µ–ª–æ–∫...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–¥–µ–ª–∫—É
        for i, lead_data in enumerate(leads, 1):
            lead_id = lead_data['lead_id']
            message_count = len(lead_data.get('messages', []))
            
            print(f"\\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(leads)} ({i/len(leads)*100:.1f}%)")
            print(f"üìù –°–¥–µ–ª–∫–∞ {lead_id}: {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            if not dry_run:
                success = self.import_lead_history(lead_data)
                if not success:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å–¥–µ–ª–∫–∏ {lead_id}")
            else:
                # –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ
                print(f"  üß™ –ë—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
                self.stats['messages_imported'] += message_count
            
            self.stats['leads_processed'] += 1
        
        if not dry_run:
            # –ò–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–º–º–∏—Ç—è—Ç—Å—è –≤ DatabaseManager
            pass
        
        print(f"\\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        self.print_stats()
        return True
    
    def print_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–º–ø–æ—Ä—Ç–∞"""
        print("\\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ú–ü–û–†–¢–ê:")
        print("=" * 40)
        print(f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–¥–µ–ª–æ–∫: {self.stats['leads_processed']}")
        print(f"üë• –°–æ–∑–¥–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {self.stats['clients_created']}")
        print(f"üí¨ –°–æ–∑–¥–∞–Ω–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {self.stats['conversations_created']}")
        print(f"üìù –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats['messages_imported']}")
        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats['messages_skipped']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}")
    
    def check_import_status(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üîç –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
            cursor.execute("SELECT COUNT(*) FROM clients")
            clients_count = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
            cursor.execute("SELECT COUNT(*) FROM conversations")
            conversations_count = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute("SELECT COUNT(*) FROM messages")
            messages_count = cursor.fetchone()[0]
            
            # –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
            cursor.execute("""
                SELECT sender_type, COUNT(*) 
                FROM messages 
                GROUP BY sender_type
            """)
            sender_stats = dict(cursor.fetchall())
            
            # –†–∞–∑–≥–æ–≤–æ—Ä—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            cursor.execute("""
                SELECT COUNT(DISTINCT conversation_id) 
                FROM messages
            """)
            active_conversations = cursor.fetchone()[0]
        
        print(f"üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {clients_count}")
        print(f"üí¨ –í—Å–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {conversations_count}")
        print(f"üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_count}")
        print(f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {active_conversations}")
        
        print("\\nüìä –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π:")
        for sender_type, count in sender_stats.items():
            icon = "üë§" if sender_type == "client" else "ü§ñ" if sender_type == "assistant" else "‚öôÔ∏è"
            print(f"  {icon} {sender_type}: {count}")
        
        return {
            'clients': clients_count,
            'conversations': conversations_count,
            'messages': messages_count,
            'active_conversations': active_conversations,
            'sender_stats': sender_stats
        }

def main():
    parser = argparse.ArgumentParser(description='–ò–º–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏–∑ amoCRM –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('file', nargs='?', default='amocrm_history.json',
                       help='JSON —Ñ–∞–π–ª —Å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π')
    parser.add_argument('--db', '-d', default='conversations.db',
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: conversations.db)')
    parser.add_argument('--dry-run', action='store_true',
                       help='–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ –≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É)')
    parser.add_argument('--status', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –∏–º–ø–æ—Ä—Ç–µ—Ä
    importer = HistoryImporter(args.db)
    
    if args.status:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        importer.check_import_status()
    else:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç
        success = importer.import_history(args.file, args.dry_run)
        if not success:
            exit(1)

if __name__ == '__main__':
    main()
